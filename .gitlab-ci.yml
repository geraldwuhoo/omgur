stages:
  - build
  - push
  - release

variables:
  DOCKERIO_MIRROR: hub.wuhoo.xyz

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor
      --registry-mirror "${DOCKERIO_MIRROR}"
      --build-arg "CI_PROJECT_PATH"
      --build-arg "CI_PROJECT_PATH"
      --build-arg "CI_PROJECT_URL"
      --build-arg "CI_COMMIT_SHORT_SHA"
      --build-arg "CI_COMMIT_SHA"
      --build-arg "CI_PIPELINE_ID"
      --build-arg "CI_PIPELINE_URL"
      --cache=true
      --cache-repo "${CI_REGISTRY_IMAGE}/build-cache"
      --cache-ttl 720h0m0s
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination=image
      --no-push
      --tarPath image.tar
  artifacts:
    untracked: false
    expire_in: 7 days
    paths:
      - image.tar
    when: on_success

push:
  stage: push
  image:
    name: gcr.io/go-containerregistry/crane/debug:v0.12.0
    entrypoint: [""]
  script:
    - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - crane push image.tar ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - crane push image.tar ${CI_REGISTRY_IMAGE}:latest
  needs:
    - build
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

push:release:
  stage: push
  image:
    name: gcr.io/go-containerregistry/crane/debug:v0.12.0
    entrypoint: [""]
  script:
    - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - crane push image.tar ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - crane push image.tar ${CI_REGISTRY_IMAGE}:stable
  needs:
    - build
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

build_binary_tag:
  stage: build
  image: golang:1.19
  before_script:
    - go version
  script:
    - go mod tidy
    - go build -v -a ./cmd/omgur
  artifacts:
    paths:
      - omgur
  only:
    - tags

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - build_binary_tag
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: './release-notes/$CI_COMMIT_TAG/CHANGELOG.md'
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_TAG"
    assets:
      links:
        - name: '$CI_PROJECT_NAME-linux'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/raw/$CI_PROJECT_NAME?job=build_binary_tag'
  only:
    - tags
